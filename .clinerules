# コミュニケーション・基本方針
- 日本語で喋るようにしてください。
- 過度な修正は控えましょう。
- 修正が前後で堂々巡りになる時は、指示者に相談してください。
- 修正が汚くならないように、以下の点に注意してください。
  - 文章における全角カッコと半角カッコの使い分けを変更しないでください。
  - 複数の修正を一度に行わず、1つのテーマに絞って修正を行ってください。

# コーディング・コード品質
- docstringは重要です。Google スタイルでの記述をお願い致します。新規作成時には日本語で記述頂いて構いません。英語への翻訳は指示者が明示的に依頼した場合にのみ行ってください。
  - ただし、 "__" から始まる内部関数については、概要を説明するのみにとどめて下さい。内部関数についてはExampleは不要です。
- エラーを発見した場合は必ずpythonコードを実際に実行し、エラーが再現するか確認してください。
- バグ修正の際には以下の点を注意してください。
  - print() を積極的に利用し、ステップ・バイ・ステップで原因究明に努めてください。
- コードリファクタリングの際は、使用されていないインポート文を削除してください。
- パッケージレベルで主要なクラスをエクスポートし、簡潔なインポート文を推奨します（例: `from docking_automation.molecule import Protein`）。
- 適切な型アノテーションを使用し、型チェック警告は必ず解消してください。

# テスト関連
- pytestの機能は積極的に利用してください。
- テストをする対象に応じてclassを作成してください。
- コードを修正したら、それに対応するテストファイルが存在する限りはpytestを実行してください。そのようなファイルがない場合はpytestの追加を推奨してください。
- テストコードを作成したら、必ずpytestを実行して、そのテストコードが有効であることを確認してください。
- テストコードでも型チェック警告を解消し、可読性を確保してください。
- テストの目的と検証内容を明確にドキュメント化してください。

# ドキュメント関連
- クイックスタートやチュートリアルには、実際の実行結果と出力例を必ず含めてください。
- ヒストグラムなどの視覚的な出力例があると分かりやすくなります。

# 開発プロセス
- 影響範囲の調査などでは、積極的に grep コマンドを利用してください。
- Git関連の処理について
  - commit message は英語で、1,2行で簡潔に書いてください。


####### 手動追加（後で整理されるべき） ########

- コマンドライン実行の際のディレクトリの指定は、常に絶対パスを使うことを推奨します。
- ドメイン駆動開発に基づく開発を進めています。

# 実装状況に関するルール
- 新規クラスを実装する際は、docking_automation_design_improvements.mdの設計に従ってください。
- すべてのクラスとメソッドには適切なdocstringを付与してください。
- 実装したクラスには対応するテストを必ず作成してください。
- 依存関係を追加する場合は、setup.pyの適切なセクションに追加してください。
- RDKitやOpenBabelなどの外部ライブラリを使用する際は、コンバータクラスを通じて使用し、直接的な依存を避けてください。