====================
アーキテクチャ概要
====================

ドッキング自動化システムのアーキテクチャは、ドメイン駆動設計（DDD）の原則とクリーンアーキテクチャに基づいています。
このページでは、システム全体のアーキテクチャと主要なコンポーネントについて概説します。

依存関係の方向性
==============

クリーンアーキテクチャの原則に従い、依存関係は内側に向けて構築されています：

* **プレゼンテーション層** → **アプリケーション層** → **ドメイン層**
* **インフラストラクチャ層** → **ドメイン層**

この構造により、ドメイン層は他の層に依存せず、ビジネスロジックを純粋に表現できます。
また、外部システムやライブラリの変更からドメインロジックを保護します。

モジュール構成
===========

システムのファイル構造は以下のように設計されています：

.. code-block:: text

    docking_automation/
    ├── domain/                  # ドメイン層
    │   ├── molecule/            # 分子準備ドメイン
    │   ├── docking/             # ドッキング実行ドメイン
    │   ├── job/                 # ジョブ管理ドメイン
    │   ├── result/              # 結果管理ドメイン
    │   └── storage/             # データアクセスドメイン
    ├── application/             # アプリケーション層
    │   ├── services/            # アプリケーションサービス
    │   ├── dto/                 # データ転送オブジェクト
    │   ├── mapper/              # マッピング
    │   ├── workflows/           # ワークフロー
    │   └── interfaces/          # インターフェース
    ├── infrastructure/          # インフラストラクチャ層
    │   ├── persistence/         # データ永続化
    │   ├── tools/               # 外部ツール連携
    │   ├── formats/             # ファイル形式変換
    │   ├── compute/             # 計算ジョブ管理
    │   └── config/              # 設定管理
    └── presentation/            # プレゼンテーション層
        ├── cli/                 # コマンドライン
        ├── api/                 # プログラミングインターフェース
        └── web/                 # Webインターフェース